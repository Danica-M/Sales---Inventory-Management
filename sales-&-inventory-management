#Project in Fundamental of Software Development

#Belle Online Jewellery Shop sell variety of jewellery and fashion accessories
#Such as earring, necklace, bracelet, hair clip, etc.

#This is Belle's Shop & Stock Management
import sqlite3

# Connect to the database
conn = sqlite3.connect('jewellery_shop.db')
cursor = conn.cursor()

# Create the products table if it doesn't exist
cursor.execute('''CREATE TABLE IF NOT EXISTS products (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                productCode INTEGER UNIQUE,
                type TEXT,
                price REAL,
                material TEXT,
                quantity INTEGER
                )''')
conn.commit()
cursor.execute("SELECT COUNT(*) FROM products")
count = cursor.fetchone()[0]

if count == 0:
    # Data from the products dictionary
    products_data = [
    {"productCode": 1001, "type": "Stud Earring", "price": 4.99, "material": "Pearl", "quantity": 25},
    {"productCode": 1002, "type": "Necklace", "price": 20.00, "material": "Rhodium", "quantity": 20},
    {"productCode": 1003, "type": "Nose ring", "price": 14.99, "material": "Silver", "quantity": 20},
    {"productCode": 1004, "type": "Ear Cuff", "price": 17.99, "material": "Gold", "quantity": 30},
    {"productCode": 1005, "type": "Bracelet", "price": 39.99, "material": "Jade", "quantity": 25}
    ]

    # Insert data into the products table
    for product in products_data:
        cursor.execute('''INSERT INTO products (productCode, type, price, material, quantity)
                        VALUES (?, ?, ?, ?, ?)''', (product["productCode"], product["type"], product["price"], product["material"], product["quantity"]))

    # Commit the changes
    conn.commit()
    print("Products loaded into the database.")
else:
    print("Products table is not empty. No action taken.")


#Function for Adding  Product to the current list of product 
def add_product(code):
    while True:
    #im using (while true and break) in this program as i find it comfortable to use
    #unlike the normal while loop, i dont need to initialize my variable 
    
        # Check if the product code already exists
        cursor.execute("SELECT COUNT(*) FROM products WHERE productCode = ?", (code,))
        if cursor.fetchone()[0] > 0:
            print("Error: Product code already exists. Please enter a different product code.")
            continue

        types= input("Enter Jewellery Type:      ")
        price= float(input("Enter Jewellery Price:     "))
        material= input("Enter Jewellery Material:  ")
       
        while True:
            quantity= int(input("Enter Jewellery Quantity:  "))
            if 10 <= quantity <= 50:
                print("Please Enter quantity between 10 and 50")
            else:
                break
             

        cursor.execute('''INSERT INTO products (productCode, type, price, material, quantity)
                        VALUES (?, ?, ?, ?, ?)''', (code, types, price, material, quantity))
        conn.commit()
        print("Product added successfully.")
        
        repeat_option=input("Do you want to enter another product? Yes or No: ")
        if repeat_option.lower() !="yes":
            break
        #this will break the first while loop otherwise it will continue asking for another product
        
#Function for checking if the product exist by code input and result will return boolean value          
def check_product():
    while True:
        code = int(input("Enter Product Code:      "))
        cursor.execute("SELECT * FROM products WHERE productCode = ?", (code,))
        product = cursor.fetchone()
        if product:
            return product[1]  # Return the product code
        else:
            print("Code not found! Please Try again")
        
    
#Function for searching for Product using product code input and result will show product details       
def search_product(code):
    cursor.execute("SELECT * FROM products WHERE productCode = ?", (code,))
    product = cursor.fetchone()
    print("__________________________________________________________________________")
    print("{0: <4}\t{1: <6}\t{2: <15}\t{3: <6}\t{4: <10}\t{5: <8}".format("ID", "CODE", "TYPE", "PRICE", "MATERIAL", "QUANTITY"))
    print("__________________________________________________________________________")
    print("{0: <4}\t{1: <6}\t{2: <15}\t{3: <6}\t{4: <10}\t{5: <8}".format(product[0], product[1], product[2], "{:.2f}".format(product[3]), product[4], product[5]))
    print("\n")
    
                      
    
#Function for updating Product details using search_product() function
def update_product(code):
    # Search for the product and display its details
    search_product(code)

    # Define a dictionary of attributes and their corresponding column names in the database
    attributes = {
        "type": "Jewellery Type",
        "price": "Jewellery Price",
        "material": "Jewellery Material",
        "quantity": "Jewellery Quantity"
    }

    # Initialize a list to store updated attributes
    updated_attributes = []

    # Loop through each attribute and prompt the user for updates
    for column_name, attribute_name in attributes.items():
        if input(f"Do you want to update {attribute_name}? (yes or no): ").lower() == "yes":
            # Get the new value for the attribute
            if column_name == "quantity":
                while True:
                    new_value = int(input(f"Enter new {attribute_name} (10-50): "))
                    if 10 <= new_value <= 50:
                        break
                    else:
                        print("Please enter a quantity between 10 and 50")
            else:
                new_value = input(f"Enter new {attribute_name}: ")

            # Execute the update query
            cursor.execute(f"UPDATE products SET {column_name} = ? WHERE productCode = ?", (new_value, code))
            conn.commit()

            # Add the updated attribute to the list
            updated_attributes.append(attribute_name)

    if updated_attributes:
        print("\nUpdated information for attributes:", ", ".join(updated_attributes))
        search_product(code)
    else:
        print("No attributes were updated.")


#function that allows customer to buy product from the shop, it will show subtotal, 15% tax, cummulated discount and total price to pay.    
def buy_product():
    cart = []  # List to store items added to the cart
    cart_total = 0  # Variable to keep track of the total cost of items in the cart
    cart_quantity = 0  # Variable to keep track of the total quantity of items in the cart

    # Shows the stocklist for customer reference
    stocklist()

    while True:
        # Check if the product exists and get its code
        code = check_product()
        cursor.execute("SELECT * FROM products WHERE productCode = ?", (code,))
        product = cursor.fetchone()

        # Check if the product is sold out
        if product[5] == 0:
            print(product[2], "is sold out!")
            continue  # Continue to the next iteration to ask for another product code

        while True:
            # Ask the user for the quantity they want to buy
            itemQ = int(input("Enter Product Quantity: "))
            if itemQ > product[5]:
                print(f"Sorry, we only have {product[5]} of {product[2]} available.")
                # Ask if they want to enter a new quantity
                if input("Do you want to enter a new quantity? (yes or no): ").lower() != "yes":
                    break  # Break the inner loop to ask for a new product code
            else:
                # Add the product to the cart
                cart.append({"code": code, "type": product[2], "price": product[3], "quantity": itemQ})
                cursor.execute("UPDATE products SET quantity = ? WHERE productCode = ?", (product[5] - itemQ, code))
                conn.commit()
                cart_total += itemQ * product[3]  # Update the cart total
                cart_quantity += itemQ  # Update the total quantity in the cart
                print("==========================================================")
                print("Your Subtotal is: $", "{:.2f}".format(cart_total))
                break  # Break the inner loop to ask if they want to buy another product

        # Ask if the user wants to buy another product
        if input("Do you want to buy another product? (yes or no): ").lower() != "yes":
            break  # Break the outer loop to proceed to the checkout

    # If there are items in the cart, proceed to calculate the total and print the receipt
    if cart_total > 0:
        discount = 0  # Initialize discount variable
        # Determine the discount based on the total quantity
        if 10 <= cart_quantity < 20:
            discount = 0.10
        elif 20 <= cart_quantity < 30:
            discount = 0.20
        elif cart_quantity >= 30:
            discount = 0.30

        gst = cart_total * 0.15  # Calculate GST (15% of the cart total)
        discount_amount = cart_total * discount  # Calculate the discount amount
        total = cart_total - discount_amount  # Calculate the final total after discount

        # Print the purchase receipt
        print("\n==========================================================")
        print("\t\tPurchase Receipt")
        print("==========================================================")
        for item in cart:
            print(f" {item['type']}\t  X {item['quantity']}\t\t\t{item['price'] * item['quantity']:.2f}")

        print("__________________________________________________________")
        print(f" Subtotal\t\t\t\t\t{cart_total:.2f}")
        print(f" GST inclusive 15%\t\t\t{gst:.2f}")
        print(f" Discount {discount * 100:.0f}%\t\t\t\t-{discount_amount:.2f}")
        print("__________________________________________________________")
        print(f" TOTAL\t\t\t\t\t\t{total:.2f}")
        print("__________________________________________________________\n")


#not required, I added this function as i think it will best fit in the stock management scenario    
def stocklist():
    print("__________________________________________________________________________")
    print("{0}\t\t{1}\t\t{2}\t\t{3}\t{4}".format("CODE", "TYPE", "PRICE", "MATERIAL", "QUANTITY"))
    print("__________________________________________________________________________")

    # Fetch all products from the database
    cursor.execute("SELECT * FROM products")
    products = cursor.fetchall()

    for product in products:
        print("{0}\t\t{1}\t{2}\t\t{3}\t\t{4}".format(product[1], product[2], "{:.2f}".format(product[3]), product[4], product[5]))
        print()

    print("__________________________________________________________________________")

    
#function for the menu, (NOT REQUIRED) but i made it separate form the main_program function 
def menu_option():
    
    print("==========================================================")
    print("\t\tBELLE ONLINE JEWELLERY SHOP")
    print("\t\t    by Danica Montano")
    print("==========================================================")
    print("\tPlease select the following options:")
    print("\t1.Add Product")
    print("\t2.Search Product")
    print("\t3.Update Product")
    print("\t4.Buy Product")
    print("\t5.Exit")
    print("==========================================================")
    
    
#Main Program
while True:
    menu_option()
    #will handle value exception
    try:
        option = int(input("Which option would you like to do? (1-5): "))
    except ValueError:
        print("Invalid input! Please enter a number between 1 and 5.")
        continue
        
    if option==1:
        while True:
            try:
                code = int(input("Enter Jewellery Code: "))
                cursor.execute("SELECT COUNT(*) FROM products WHERE productCode = ?", (code,))
                if cursor.fetchone()[0] > 0:
                    print("Invalid! This code already exists. Please enter a new code.")
                else:
                    add_product(code)
                    print()
                    break
            except ValueError:
                print("Invalid input! Please enter a valid integer code.")
                continue
    elif option==2:
        search_product(check_product())
    elif option==3:
        update_product(check_product())
    elif option==4:
        buy_product()
    elif option==5:
        print("Goodbye!")
        break
    else:
        print("Invalid input! Please enter a number between 1 and 5.")
        
    